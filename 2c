#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <bfd.h>
#include <dis-asm.h>
#include <regex.h>

typedef enum {
    INT,
    FLOAT,
    BOOL,
    STRING,
    ARRAY,
    CUSTOM,
    REFERENCE
} Type;

typedef struct {
    char *name;
    Type type;
} Variable;

typedef struct {
    char *name;
    char *value;
} Constant;

// Match a register name, e.g. %eax, %ebx, etc.
regex_t register_regex;

// Match an immediate value, e.g. $1, $0x10, etc.
regex_t immediate_regex;

// Match a memory reference, e.g. (%eax), 8(%eax), (%eax,%ebx), etc.
regex_t memory_regex;

void init_regex() {
    regcomp(&register_regex, "^%\\w+$", REG_EXTENDED);
    regcomp(&immediate_regex, "^\\$[-+]?[0-9]+$|^\\$0x[0-9a-fA-F]+$", REG_EXTENDED);
    regcomp(&memory_regex, "^(\\([%]\\w+\\)|(\\d+)?\\([%]\\w+(,[%]\\w+)?\\))$", REG_EXTENDED);
}

void cleanup_regex() {
    regfree(&register_regex);
    regfree(&immediate_regex);
    regfree(&memory_regex);
}

int main(int argc, char **argv) {
    if (argc != 2) {
        printf("Usage: %s <filename>\n", argv[0]);
        return 1;
    }
    
    bfd_init();
    bfd *abfd = bfd_openr(argv[1], "pe-i386");
    if (abfd == NULL) {
        fprintf(stderr, "Failed to open binary file.\n");
        return 1;
    }
    if (!bfd_check_format(abfd, bfd_object)) {
        fprintf(stderr, "Invalid binary file format.\n");
        return 1;
    }
    disassemble_info disasm_info;
    init_disassemble_info(&disasm_info, stdout, (fprintf_ftype) fprintf);
    disasm_info.flavour = bfd_get_flavour(abfd);
    disasm_info.arch = bfd_get_arch(abfd);
    disasm_info.mach = bfd_get_mach(abfd);
    disasm_info.endian = (disasm_info.arch == bfd_arch_i386 || disasm_info.arch == bfd_arch_x86_64) ? BFD_ENDIAN_LITTLE : BFD_ENDIAN_BIG;

    long storage_needed = bfd_get_symtab_upper_bound(abfd);
    if (storage_needed < 0) {
        fprintf(stderr, "Failed to get symbol table size.\n");
        return 1;
    }

    asymbol **symbol_table = (asymbol **) malloc(storage_needed);
    long symbol_count = bfd_canonicalize_symtab(abfd, symbol_table);
    if (symbol_count < 0) {
        fprintf(stderr, "Failed to read symbol table.\n");
        free(symbol_table);
        return 1;
    }

    init_regex();
    
    for (asection *section = abfd->sections; section; section = section->next) {
        if (section->flags & SEC_CODE) {
            printf("\n        /* Section: %s */", section->name);
            bfd_vma vma = section->vma;
            bfd_size_type size = section->size;
            disasm_info.buffer = bfd_malloc(size);
            bfd_get_section_contents(abfd, section, disasm_info.buffer, 0, size);
            disasm_info.buffer_length = size;
            disasm_info.section = section;
            disassemble_init_for_target(&disasm_info);

            while (vma < section->vma + section->size) {
                printf("\n        ");

                int insn_length = print_insn_i386(vma, &disasm_info);
                vma += insn_length;

                char *cstr = disasm_info.insn_buffer;

                // Remove the trailing newline character
                if (cstr[strlen(cstr)-1] == '\n') {
                    cstr[strlen(cstr)-1] = '\0';
                }

                printf("/* %s */", cstr);

                for (int i = 0; i < insn_length; i++) {
                    printf("0x%02x", disasm_info.buffer[i]);
                    if (i < insn_length-1) {
                        printf(", ");
                    }
                }
                if (vma < section->vma + section->size) {
                    printf(",");
                }
            }

                        bfd_free(disasm_info.insn_info);

            printf("\n");
        }

        // Finish up and clean up
        bfd_close(abfd);
        free(buffer);
        return 0;
    }

    long storage_needed = bfd_get_symtab_upper_bound(abfd);
    if (storage_needed < 0) {
        fprintf(stderr, "Failed to get symbol table size: %s\n", bfd_errmsg(bfd_get_error()));
        bfd_close(abfd);
        free(buffer);
        return 1;
    }

    if (storage_needed) {
        asymbol **symbol_table = (asymbol**) malloc(storage_needed);
        long num_symbols = bfd_canonicalize_symtab(abfd, symbol_table);
        if (num_symbols < 0) {
            fprintf(stderr, "Failed to read symbol table: %s\n", bfd_errmsg(bfd_get_error()));
            bfd_close(abfd);
            free(buffer);
            return 1;
        }

        printf("\n\n\n// Symbol table:\n");
        for (long i = 0; i < num_symbols; i++) {
            if (symbol_table[i]->flags & BSF_FUNCTION) {
                printf("void %s() {}\n", symbol_table[i]->name);
            } else {
                printf("int %s;\n", symbol_table[i]->name);
            }
        }

        free(symbol_table);
    }

    bfd_close(abfd);
    free(buffer);
    return 0;
}

