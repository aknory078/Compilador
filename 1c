#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <bfd.h>
#include <dis-asm.h>

typedef enum {
    INT,
    FLOAT,
    BOOL,
    STRING,
    ARRAY,
    CUSTOM,
    REFERENCE
} Type;

typedef struct {
    char *name;
    Type type;
} Variable;

typedef struct {
    char *name;
    char *value;
} Constant;

int main(int argc, char **argv) {
    if (argc != 2) {
        printf("Usage: %s <filename>\n", argv[0]);
        return 1;
    }
    
    bfd_init();
    bfd *abfd = bfd_openr(argv[1], "pe-i386");
    if (abfd == NULL) {
        fprintf(stderr, "Failed to open binary file.\n");
        return 1;
    }
    if (!bfd_check_format(abfd, bfd_object)) {
        fprintf(stderr, "Invalid binary file format.\n");
        return 1;
    }
    disassemble_info disasm_info;
    init_disassemble_info(&disasm_info, stdout, (fprintf_ftype) fprintf);
    disasm_info.flavour = bfd_get_flavour(abfd);
    disasm_info.arch = bfd_get_arch(abfd);
    disasm_info.mach = bfd_get_mach(abfd);
    disasm_info.endian = (disasm_info.arch == bfd_arch_i386 || disasm_info.arch == bfd_arch_x86_64) ? BFD_ENDIAN_LITTLE : BFD_ENDIAN_BIG;

    long storage_needed = bfd_get_symtab_upper_bound(abfd);
    if (storage_needed < 0) {
        fprintf(stderr, "Failed to get symbol table size.\n");
        return 1;
    }

    asymbol **symbol_table = (asymbol **) malloc(storage_needed);
    long symbol_count = bfd_canonicalize_symtab(abfd, symbol_table);
    if (symbol_count < 0) {
        fprintf(stderr, "Failed to read symbol table.\n");
        free(symbol_table);
        return 1;
    }

    for (asection *section = abfd->sections; section; section = section->next) {
        if (section->flags & SEC_CODE) {
            printf("Disassembling section: %s\n", section->name);
            bfd_vma vma = section->vma;
            bfd_size_type size = section->size;
            disasm_info.buffer = bfd_malloc(size);
            bfd_get_section_contents(abfd, section, disasm_info.buffer, 0, size);
            disasm_info.buffer_length = size;
            disasm_info.section = section;
            disassemble_init_for_target(&disasm_info);

            while (vma < section->vma + section->size) {
                int insn_length = print_insn_i386(vma, &disasm_info);
                vma += insn_length;
            }
            bfd_free(disasm_info.buffer);
        }
    }
    
    free(symbol_table);
    bfd_close(abfd);
    return 0;
}

char *read_word(FILE *f) {
    char *buffer = NULL;
    int pos = 0;
    int c;

    while ((c = fgetc(f)) != EOF) {
        if (c == ' ' || c == '\n' || c == '\t') {
            break;
        }

        buffer = realloc(buffer, pos + 1);
        buffer[pos] = c;
        pos++;
    }

    if (pos == 0) {
        return NULL;
    }

    buffer = realloc(buffer, pos + 1);
        buffer[pos] = '\0';
    return buffer;
}

int is_variable(char *name, Variable *variables, int variable_count) {
    for (int i = 0; i < variable_count; i++) {
        if (strcmp(variables[i].name, name) == 0) {
            return i;
        }
    }
    return -1;
}

int is_constant(char *value, Constant *constants, int constant_count) {
    for (int i = 0; i < constant_count; i++) {
        if (strcmp(constants[i].value, value) == 0) {
            return i;
        }
    }
    return -1;
}

void print_variable(char *name, Variable *variables, int variable_count, int is_array, int index) {
    int i = is_variable(name, variables, variable_count);
    if (i != -1) {
        if (variables[i].type == INT) {
            printf("%d", *((int *) variables[i].value));
        } else if (variables[i].type == FLOAT) {
            printf("%f", *((float *) variables[i].value));
        } else if (variables[i].type == BOOL) {
            printf("%s", (*((int *) variables[i].value)) ? "true" : "false");
        } else if (variables[i].type == STRING) {
            printf("%s", (char *) variables[i].value);
        } else if (variables[i].type == ARRAY) {
            int *array = (int *) variables[i].value;
            if (is_array) {
                printf("%d", array[index]);
            } else {
                printf("[");
                for (int j = 0; j < array[0]; j++) {
                    printf("%d", array[j+1]);
                    if (j < array[0]-1) {
                        printf(", ");
                    }
                }
                printf("]");
            }
        } else {
            printf("%p", variables[i].value);
        }
    } else {
        printf("undefined");
    }
}

void print_constant(char *value, Constant *constants, int constant_count) {
    int i = is_constant(value, constants, constant_count);
    if (i != -1) {
        printf("%s", constants[i].value);
    } else {
        printf("%s", value);
    }
}

void print_line(char *line, Variable *variables, int variable_count, Constant *constants, int constant_count) {
    char *token;
    int is_array = 0, array_index = -1;

    token = strtok(line, " \n\t");
    if (token == NULL) {
        return;
    }

    if (strcmp(token, "push") == 0) {
        token = strtok(NULL, " \n\t");
        if (token == NULL) {
            printf("Error: expected value after 'push'\n");
            return;
        }
        if (token[0] == '[') {
            is_array = 1;
            array_index = atoi(token+1);
            token = strtok(NULL, " \n\t");
            if (token == NULL || strcmp(token, "]") != 0) {
                printf("Error: expected ']' after array index\n");
                return;
            }
            token = strtok(NULL, " \n\t");
        }
        if (token == NULL) {
            printf("Error: expected value after 'push'\n");
            return;
        }
        void print_value(Constant *constants, int constant_count, Variable *variables, int variable_count, char *token) {
    if (token[0] == '"' || token[0] == '\'') {
        printf("%s", token+1);
    } else if (strcmp(token, "true") == 0) {
        printf("true");
    } else if (strcmp(token, "false") == 0) {
        printf("false");
    } else {
        int found = 0;
        for (int i = 0; i < constant_count; i++) {
            if (strcmp(token, constants[i].name) == 0) {
                printf("%s", constants[i].value);
                found = 1;
                break;
            }
        }
        if (!found) {
            for (int i = 0; i < variable_count; i++) {
                if (strcmp(token, variables[i].name) == 0) {
                    switch (variables[i].type) {
                        case INT:
                            printf("%d", *(int *) variables[i].value);
                            break;
                        case FLOAT:
                            printf("%f", *(float *) variables[i].value);
                            break;
                        case BOOL:
                            printf("%s", *(int *) variables[i].value ? "true" : "false");
                            break;
                        case STRING:
                            printf("%s", (char *) variables[i].value);
                            break;
                        default:
                            printf("[UNKNOWN TYPE]");
                            break;
                    }
                    found = 1;
                    break;
                }
            }
        }
        if (!found) {
            printf("[UNKNOWN VALUE: %s]", token);
        }
    }
}


